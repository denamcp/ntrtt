/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graphlib;

import org.junit.BeforeClass;
import org.junit.Test;

import java.util.List;
import java.util.StringJoiner;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class GraphLibraryTest {
    private static final Graph<NamedVertex> graphSingleVertex = GraphFactory.createDefaultGraph();
    private static final Graph<NamedVertex> graph2Vertex = GraphFactory.createDefaultGraph();
    private static final Graph<NamedVertex> graphComplex = GraphFactory.createDefaultGraph();
    private static final NamedVertex vertex0 = new NamedVertex("0");
    private static final NamedVertex vertex1 = new NamedVertex("1");
    private static final NamedVertex vertex2 = new NamedVertex("2");
    private static final NamedVertex vertex3 = new NamedVertex("3");
    private static final NamedVertex vertex4 = new NamedVertex("4");
    private static final NamedVertex vertex5 = new NamedVertex("5");
    private static final NamedVertex vertex6 = new NamedVertex("6");
    private static final SimpleEdge<NamedVertex> edge = new SimpleEdge<>(vertex1, vertex2);

    @BeforeClass
    public static void prepare() throws VertexNotFoundException {
        prepareSingleVertexGraph();
        prepare2VertexGraph();
        prepareComplexGraph();
    }


    private static void prepareSingleVertexGraph() {
        graphSingleVertex.addVertex(vertex1);
    }


    private static void prepare2VertexGraph() throws VertexNotFoundException {
        graph2Vertex.addVertex(vertex1);
        graph2Vertex.addVertex(vertex2);
        graph2Vertex.addBiDirectionalEdge(vertex1, vertex2);
    }

    private static void prepareComplexGraph() throws VertexNotFoundException {
        graphComplex.addVertex(vertex0);
        graphComplex.addVertex(vertex1);
        graphComplex.addVertex(vertex2);
        graphComplex.addVertex(vertex3);
        graphComplex.addVertex(vertex4);
        graphComplex.addVertex(vertex5);
        graphComplex.addVertex(vertex6);

        SimpleEdge<NamedVertex> edge01 = new SimpleEdge<>(vertex0, vertex1);
        SimpleEdge<NamedVertex> edge12 = new SimpleEdge<>(vertex1, vertex2);
        SimpleEdge<NamedVertex> edge13 = new SimpleEdge<>(vertex1, vertex3);
        SimpleEdge<NamedVertex> edge14 = new SimpleEdge<>(vertex1, vertex4);

        SimpleEdge<NamedVertex> edge23 = new SimpleEdge<>(vertex2, vertex3);
        SimpleEdge<NamedVertex> edge32 = new SimpleEdge<>(vertex3, vertex2);
        SimpleEdge<NamedVertex> edge34 = new SimpleEdge<>(vertex3, vertex4);

        SimpleEdge<NamedVertex> edge35 = new SimpleEdge<>(vertex3, vertex5);
        SimpleEdge<NamedVertex> edge45 = new SimpleEdge<>(vertex4, vertex5);
        SimpleEdge<NamedVertex> edge56 = new SimpleEdge<>(vertex5, vertex6);

        graphComplex.addEdge(edge01);
        graphComplex.addEdge(edge12);
        graphComplex.addEdge(edge13);
        graphComplex.addEdge(edge14);
        graphComplex.addEdge(edge23);
        graphComplex.addEdge(edge32);
        graphComplex.addEdge(edge34);
        graphComplex.addEdge(edge35);
        graphComplex.addEdge(edge45);
        graphComplex.addEdge(edge56);
    }

    @Test
    public void test_addEdgeToNonexistent_Exception() {
        final Graph<NamedVertex> graphFail = GraphFactory.createDefaultGraph();
        boolean gotVertexNotFoundException = false;
        try {
            graphFail.addEdge(new SimpleEdge<>(vertex0, vertex6));
            fail("Estimated VertexNotFoundException exception");
        } catch (VertexNotFoundException e) {
            gotVertexNotFoundException = true;
        }
        assertTrue(gotVertexNotFoundException);
    }

    @Test
    public void test_addEdge_ReturnsProperEdge() throws VertexNotFoundException {
        final Graph<NamedVertex> graph = GraphFactory.createDefaultGraph();
        graph.addVertex(vertex0);
        graph.addVertex(vertex1);
        final Edge<NamedVertex> namedVertexEdge = graph.addEdge(vertex0, vertex1);

        assertTrue(namedVertexEdge.getFrom().equals(vertex0) && namedVertexEdge.getTo().equals(vertex1));
    }

    @Test
    public void test_PathToItself_emptyList() throws VertexNotFoundException, BadBackGraphException {
        List<Edge<NamedVertex>> pathBFS = graphSingleVertex.getPath(vertex1, vertex1, Graph.PathMethod.BFS);

        System.out.println(listOfEdgesToString(pathBFS));
        assertEquals(0, pathBFS.size());
    }

    @Test
    public void test_Path1To2_oneBidirectionalEdge() throws VertexNotFoundException, BadBackGraphException {
        List<Edge<NamedVertex>> pathBFS = graph2Vertex.getPath(vertex1, vertex2, Graph.PathMethod.BFS);

        System.out.println(listOfEdgesToString(pathBFS));
        final Edge<NamedVertex> namedVertexEdge = pathBFS.get(0);

        assertEquals(namedVertexEdge, edge);
    }

    @Test
    public void test_PathComplex_StartsFromStart() throws VertexNotFoundException, BadBackGraphException {
        List<Edge<NamedVertex>> pathBFS = graphComplex.getPath(vertex1, vertex5, Graph.PathMethod.BFS);
        System.out.println(listOfEdgesToString(pathBFS));

        Edge<NamedVertex> previous = pathBFS.get(0);
        assertEquals(previous.getFrom(), vertex1);
    }

    @Test
    public void test_PathComplex_EndsOnEnd() throws VertexNotFoundException, BadBackGraphException {
        List<Edge<NamedVertex>> pathBFS = graphComplex.getPath(vertex1, vertex5, Graph.PathMethod.BFS);
        System.out.println(listOfEdgesToString(pathBFS));

        Edge<NamedVertex> last = pathBFS.get(pathBFS.size() - 1);
        assertEquals(last.getTo(), vertex5);
    }

    @Test
    public void test_PathComplex_EdgesConnected() throws VertexNotFoundException, BadBackGraphException {
        List<Edge<NamedVertex>> pathBFS = graphComplex.getPath(vertex1, vertex5, Graph.PathMethod.BFS);
        System.out.println(listOfEdgesToString(pathBFS));

        Edge<NamedVertex> previous = null;
        for (Edge<NamedVertex> edge : pathBFS) {
            if (previous != null && !(previous.getTo().equals(edge.getFrom()))) {
                fail(String.format("Not connected edges in path: %s -- %s", getStringRepresentation(previous), getStringRepresentation(edge)));
            }
            previous = edge;
        }
    }

    private static <T> String listOfEdgesToString(final List<Edge<T>> edges) {
        final StringJoiner joiner = new StringJoiner("\n");
        for (Edge<T> edge : edges) {
            joiner.add(getStringRepresentation(edge));
        }
        return joiner.toString();
    }

    public static <T> String getStringRepresentation(Edge<T> edge) {
        return edge.getFrom() + " -> " + edge.getTo();
    }

    private static class NamedVertex {
        final String name;

        public NamedVertex(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return name;
        }
    }
}
